{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd \nimport os\nimport torch\nfrom torchvision import datasets, transforms\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-16T12:10:06.179104Z","iopub.execute_input":"2024-04-16T12:10:06.179863Z","iopub.status.idle":"2024-04-16T12:10:12.022930Z","shell.execute_reply.started":"2024-04-16T12:10:06.179831Z","shell.execute_reply":"2024-04-16T12:10:12.021872Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"from PIL import Image\n\nclass CustomImageDataset(torch.utils.data.Dataset):\n    def __init__(self, data_dir, transform=None):\n        self.data_dir = data_dir\n        self.transform = transform\n        \n        # Получаем список папок (классов)\n        self.classes = sorted(os.listdir(data_dir))\n        \n        # Создаем словарь, где ключ - это название класса, а значение - это его порядковый номер (метка)\n        self.class_to_label = {class_name: i for i, class_name in enumerate(self.classes)}\n        \n        # Получаем список всех файлов с изображениями и их соответствующие метки\n        self.samples = self.load_samples()\n    \n    def __len__(self):\n        return len(self.samples)\n\n    def __getitem__(self, idx):\n        img_path, label = self.samples[idx]\n        image = Image.open(img_path)\n        if self.transform:\n            image = self.transform(image)\n        return image, label\n    \n    def load_samples(self):\n        samples = []\n        \n        for class_ in self.classes:\n            class_path = os.path.join(self.data_dir, class_)\n            image_files = os.listdir(class_path)\n            for image_file in image_files:\n                image_path = os.path.join(class_path, image_file)\n                samples.append((image_path, self.class_to_label[class_]))\n        return samples   ","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:14.986863Z","iopub.execute_input":"2024-04-16T12:10:14.987697Z","iopub.status.idle":"2024-04-16T12:10:14.997553Z","shell.execute_reply.started":"2024-04-16T12:10:14.987661Z","shell.execute_reply":"2024-04-16T12:10:14.996638Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"class TransformDataset(torch.utils.data.Dataset):\n    def __init__(self, subset, transform=None):\n        self.subset = subset\n        self.transform = transform\n        self.classes = ['all', 'heim']\n\n    def __getitem__(self, index):\n        x, y = self.subset[index]\n        if self.transform:\n            x = self.transform(x)\n        return x, y\n\n    def __len__(self):\n        return len(self.subset)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:17.476374Z","iopub.execute_input":"2024-04-16T12:10:17.476718Z","iopub.status.idle":"2024-04-16T12:10:17.483089Z","shell.execute_reply.started":"2024-04-16T12:10:17.476689Z","shell.execute_reply":"2024-04-16T12:10:17.482139Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"train_transform = transforms.Compose([\n    transforms.Resize((256, 256)), \n    transforms.RandomHorizontalFlip(p=0.5),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225]),\n])\n\ntest_transform = transforms.Compose([\n    transforms.Resize((256, 256)), \n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225]),\n])\n\ndataset1 = datasets.ImageFolder(root='/kaggle/input/leukemia-classification/C-NMC_Leukemia/training_data/fold_0')\ndataset2 = datasets.ImageFolder(root='/kaggle/input/leukemia-classification/C-NMC_Leukemia/training_data/fold_1')\ndataset3 = datasets.ImageFolder(root='/kaggle/input/leukemia-classification/C-NMC_Leukemia/training_data/fold_2')\n\ndataset = torch.utils.data.ConcatDataset([dataset1, dataset2, dataset3])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:18.995636Z","iopub.execute_input":"2024-04-16T12:10:18.996538Z","iopub.status.idle":"2024-04-16T12:10:36.727961Z","shell.execute_reply.started":"2024-04-16T12:10:18.996502Z","shell.execute_reply":"2024-04-16T12:10:36.727129Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"from torch.utils.data import random_split\ntrain_ratio = 0.8\ntrain_data, val_data = random_split(dataset, [train_ratio, 1-train_ratio])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:36.729556Z","iopub.execute_input":"2024-04-16T12:10:36.729860Z","iopub.status.idle":"2024-04-16T12:10:36.766730Z","shell.execute_reply.started":"2024-04-16T12:10:36.729836Z","shell.execute_reply":"2024-04-16T12:10:36.766045Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train_data = TransformDataset(train_data, transform = train_transform)\nval_data = TransformDataset(val_data, transform = test_transform)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:36.767731Z","iopub.execute_input":"2024-04-16T12:10:36.768006Z","iopub.status.idle":"2024-04-16T12:10:36.772369Z","shell.execute_reply.started":"2024-04-16T12:10:36.767984Z","shell.execute_reply":"2024-04-16T12:10:36.771431Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"batch_size = 512\ntrain_loader = torch.utils.data.DataLoader(train_data, shuffle=True, batch_size=batch_size)\nval_loader = torch.utils.data.DataLoader(val_data, shuffle=True, batch_size=batch_size)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:36.774370Z","iopub.execute_input":"2024-04-16T12:10:36.774633Z","iopub.status.idle":"2024-04-16T12:10:36.784017Z","shell.execute_reply.started":"2024-04-16T12:10:36.774612Z","shell.execute_reply":"2024-04-16T12:10:36.782996Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"from torchvision import models\n\nresnet = models.resnet101(pretrained=True)\nresnet","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:47.490406Z","iopub.execute_input":"2024-04-16T12:10:47.491291Z","iopub.status.idle":"2024-04-16T12:10:49.776518Z","shell.execute_reply.started":"2024-04-16T12:10:47.491250Z","shell.execute_reply":"2024-04-16T12:10:49.775348Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet101_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet101_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/resnet101-63fe2227.pth\" to /root/.cache/torch/hub/checkpoints/resnet101-63fe2227.pth\n100%|██████████| 171M/171M [00:01<00:00, 168MB/s]  \n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"ResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer1): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (3): Bottleneck(\n      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n  )\n  (layer3): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (downsample): Sequential(\n        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (3): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (4): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (5): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (6): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (7): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (8): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (9): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (10): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (11): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (12): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (13): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (14): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (15): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (16): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (17): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (18): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (19): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (20): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (21): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (22): Bottleneck(\n      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n  )\n  (layer4): Sequential(\n    (0): Bottleneck(\n      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (downsample): Sequential(\n        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): Bottleneck(\n      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n    (2): Bottleneck(\n      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=2048, out_features=1000, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"from torch import nn\nimport torch.nn.functional as F\n\n\nclass TransferLerningLeukemiaClassifier(nn.Module):\n    def __init__(self, num_classes=2):\n        super().__init__()\n        \n        res_net101 = models.resnet101(pretrained=True)\n        \n        for param in res_net101.parameters():\n            param.requires_grad = False\n        \n        in_features = res_net101.fc.in_features\n        res_net101.fc = nn.Identity()\n        \n        self.feature_extractor = res_net101\n        \n        self.dropout1 = nn.Dropout(0.2)\n        self.linear1 = nn.Linear(in_features, num_classes)\n\n        \n    \n    def forward(self, x):\n        out = self.feature_extractor(x)\n        \n        out = self.dropout1(out)\n        \n        out = self.linear1(out)\n        out = F.relu(out)\n        \n        \n        return out\n\n\n    def predict(self, X, device='cpu'):\n        X = torch.FloatTensor(np.array(X)).to(device)\n\n        with torch.no_grad():\n            y_pred = F.softmax(self.forward(X), dim=-1)\n\n        return y_pred.cpu().numpy()\n\n\nmodel = TransferLerningLeukemiaClassifier(len(train_data.classes)).to(device)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:49.778433Z","iopub.execute_input":"2024-04-16T12:10:49.778816Z","iopub.status.idle":"2024-04-16T12:10:51.042500Z","shell.execute_reply.started":"2024-04-16T12:10:49.778773Z","shell.execute_reply":"2024-04-16T12:10:51.041530Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"!pip install -q torchsummary","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:10:58.274853Z","iopub.execute_input":"2024-04-16T12:10:58.275590Z","iopub.status.idle":"2024-04-16T12:11:13.340131Z","shell.execute_reply.started":"2024-04-16T12:10:58.275555Z","shell.execute_reply":"2024-04-16T12:11:13.339061Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"from torchsummary import summary\n\nsummary(model, input_size=(3, 256, 256))","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:11:14.866051Z","iopub.execute_input":"2024-04-16T12:11:14.866418Z","iopub.status.idle":"2024-04-16T12:11:14.927092Z","shell.execute_reply.started":"2024-04-16T12:11:14.866383Z","shell.execute_reply":"2024-04-16T12:11:14.926160Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"----------------------------------------------------------------\n        Layer (type)               Output Shape         Param #\n================================================================\n            Conv2d-1         [-1, 64, 128, 128]           9,408\n       BatchNorm2d-2         [-1, 64, 128, 128]             128\n              ReLU-3         [-1, 64, 128, 128]               0\n         MaxPool2d-4           [-1, 64, 64, 64]               0\n            Conv2d-5           [-1, 64, 64, 64]           4,096\n       BatchNorm2d-6           [-1, 64, 64, 64]             128\n              ReLU-7           [-1, 64, 64, 64]               0\n            Conv2d-8           [-1, 64, 64, 64]          36,864\n       BatchNorm2d-9           [-1, 64, 64, 64]             128\n             ReLU-10           [-1, 64, 64, 64]               0\n           Conv2d-11          [-1, 256, 64, 64]          16,384\n      BatchNorm2d-12          [-1, 256, 64, 64]             512\n           Conv2d-13          [-1, 256, 64, 64]          16,384\n      BatchNorm2d-14          [-1, 256, 64, 64]             512\n             ReLU-15          [-1, 256, 64, 64]               0\n       Bottleneck-16          [-1, 256, 64, 64]               0\n           Conv2d-17           [-1, 64, 64, 64]          16,384\n      BatchNorm2d-18           [-1, 64, 64, 64]             128\n             ReLU-19           [-1, 64, 64, 64]               0\n           Conv2d-20           [-1, 64, 64, 64]          36,864\n      BatchNorm2d-21           [-1, 64, 64, 64]             128\n             ReLU-22           [-1, 64, 64, 64]               0\n           Conv2d-23          [-1, 256, 64, 64]          16,384\n      BatchNorm2d-24          [-1, 256, 64, 64]             512\n             ReLU-25          [-1, 256, 64, 64]               0\n       Bottleneck-26          [-1, 256, 64, 64]               0\n           Conv2d-27           [-1, 64, 64, 64]          16,384\n      BatchNorm2d-28           [-1, 64, 64, 64]             128\n             ReLU-29           [-1, 64, 64, 64]               0\n           Conv2d-30           [-1, 64, 64, 64]          36,864\n      BatchNorm2d-31           [-1, 64, 64, 64]             128\n             ReLU-32           [-1, 64, 64, 64]               0\n           Conv2d-33          [-1, 256, 64, 64]          16,384\n      BatchNorm2d-34          [-1, 256, 64, 64]             512\n             ReLU-35          [-1, 256, 64, 64]               0\n       Bottleneck-36          [-1, 256, 64, 64]               0\n           Conv2d-37          [-1, 128, 64, 64]          32,768\n      BatchNorm2d-38          [-1, 128, 64, 64]             256\n             ReLU-39          [-1, 128, 64, 64]               0\n           Conv2d-40          [-1, 128, 32, 32]         147,456\n      BatchNorm2d-41          [-1, 128, 32, 32]             256\n             ReLU-42          [-1, 128, 32, 32]               0\n           Conv2d-43          [-1, 512, 32, 32]          65,536\n      BatchNorm2d-44          [-1, 512, 32, 32]           1,024\n           Conv2d-45          [-1, 512, 32, 32]         131,072\n      BatchNorm2d-46          [-1, 512, 32, 32]           1,024\n             ReLU-47          [-1, 512, 32, 32]               0\n       Bottleneck-48          [-1, 512, 32, 32]               0\n           Conv2d-49          [-1, 128, 32, 32]          65,536\n      BatchNorm2d-50          [-1, 128, 32, 32]             256\n             ReLU-51          [-1, 128, 32, 32]               0\n           Conv2d-52          [-1, 128, 32, 32]         147,456\n      BatchNorm2d-53          [-1, 128, 32, 32]             256\n             ReLU-54          [-1, 128, 32, 32]               0\n           Conv2d-55          [-1, 512, 32, 32]          65,536\n      BatchNorm2d-56          [-1, 512, 32, 32]           1,024\n             ReLU-57          [-1, 512, 32, 32]               0\n       Bottleneck-58          [-1, 512, 32, 32]               0\n           Conv2d-59          [-1, 128, 32, 32]          65,536\n      BatchNorm2d-60          [-1, 128, 32, 32]             256\n             ReLU-61          [-1, 128, 32, 32]               0\n           Conv2d-62          [-1, 128, 32, 32]         147,456\n      BatchNorm2d-63          [-1, 128, 32, 32]             256\n             ReLU-64          [-1, 128, 32, 32]               0\n           Conv2d-65          [-1, 512, 32, 32]          65,536\n      BatchNorm2d-66          [-1, 512, 32, 32]           1,024\n             ReLU-67          [-1, 512, 32, 32]               0\n       Bottleneck-68          [-1, 512, 32, 32]               0\n           Conv2d-69          [-1, 128, 32, 32]          65,536\n      BatchNorm2d-70          [-1, 128, 32, 32]             256\n             ReLU-71          [-1, 128, 32, 32]               0\n           Conv2d-72          [-1, 128, 32, 32]         147,456\n      BatchNorm2d-73          [-1, 128, 32, 32]             256\n             ReLU-74          [-1, 128, 32, 32]               0\n           Conv2d-75          [-1, 512, 32, 32]          65,536\n      BatchNorm2d-76          [-1, 512, 32, 32]           1,024\n             ReLU-77          [-1, 512, 32, 32]               0\n       Bottleneck-78          [-1, 512, 32, 32]               0\n           Conv2d-79          [-1, 256, 32, 32]         131,072\n      BatchNorm2d-80          [-1, 256, 32, 32]             512\n             ReLU-81          [-1, 256, 32, 32]               0\n           Conv2d-82          [-1, 256, 16, 16]         589,824\n      BatchNorm2d-83          [-1, 256, 16, 16]             512\n             ReLU-84          [-1, 256, 16, 16]               0\n           Conv2d-85         [-1, 1024, 16, 16]         262,144\n      BatchNorm2d-86         [-1, 1024, 16, 16]           2,048\n           Conv2d-87         [-1, 1024, 16, 16]         524,288\n      BatchNorm2d-88         [-1, 1024, 16, 16]           2,048\n             ReLU-89         [-1, 1024, 16, 16]               0\n       Bottleneck-90         [-1, 1024, 16, 16]               0\n           Conv2d-91          [-1, 256, 16, 16]         262,144\n      BatchNorm2d-92          [-1, 256, 16, 16]             512\n             ReLU-93          [-1, 256, 16, 16]               0\n           Conv2d-94          [-1, 256, 16, 16]         589,824\n      BatchNorm2d-95          [-1, 256, 16, 16]             512\n             ReLU-96          [-1, 256, 16, 16]               0\n           Conv2d-97         [-1, 1024, 16, 16]         262,144\n      BatchNorm2d-98         [-1, 1024, 16, 16]           2,048\n             ReLU-99         [-1, 1024, 16, 16]               0\n      Bottleneck-100         [-1, 1024, 16, 16]               0\n          Conv2d-101          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-102          [-1, 256, 16, 16]             512\n            ReLU-103          [-1, 256, 16, 16]               0\n          Conv2d-104          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-105          [-1, 256, 16, 16]             512\n            ReLU-106          [-1, 256, 16, 16]               0\n          Conv2d-107         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-108         [-1, 1024, 16, 16]           2,048\n            ReLU-109         [-1, 1024, 16, 16]               0\n      Bottleneck-110         [-1, 1024, 16, 16]               0\n          Conv2d-111          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-112          [-1, 256, 16, 16]             512\n            ReLU-113          [-1, 256, 16, 16]               0\n          Conv2d-114          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-115          [-1, 256, 16, 16]             512\n            ReLU-116          [-1, 256, 16, 16]               0\n          Conv2d-117         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-118         [-1, 1024, 16, 16]           2,048\n            ReLU-119         [-1, 1024, 16, 16]               0\n      Bottleneck-120         [-1, 1024, 16, 16]               0\n          Conv2d-121          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-122          [-1, 256, 16, 16]             512\n            ReLU-123          [-1, 256, 16, 16]               0\n          Conv2d-124          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-125          [-1, 256, 16, 16]             512\n            ReLU-126          [-1, 256, 16, 16]               0\n          Conv2d-127         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-128         [-1, 1024, 16, 16]           2,048\n            ReLU-129         [-1, 1024, 16, 16]               0\n      Bottleneck-130         [-1, 1024, 16, 16]               0\n          Conv2d-131          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-132          [-1, 256, 16, 16]             512\n            ReLU-133          [-1, 256, 16, 16]               0\n          Conv2d-134          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-135          [-1, 256, 16, 16]             512\n            ReLU-136          [-1, 256, 16, 16]               0\n          Conv2d-137         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-138         [-1, 1024, 16, 16]           2,048\n            ReLU-139         [-1, 1024, 16, 16]               0\n      Bottleneck-140         [-1, 1024, 16, 16]               0\n          Conv2d-141          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-142          [-1, 256, 16, 16]             512\n            ReLU-143          [-1, 256, 16, 16]               0\n          Conv2d-144          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-145          [-1, 256, 16, 16]             512\n            ReLU-146          [-1, 256, 16, 16]               0\n          Conv2d-147         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-148         [-1, 1024, 16, 16]           2,048\n            ReLU-149         [-1, 1024, 16, 16]               0\n      Bottleneck-150         [-1, 1024, 16, 16]               0\n          Conv2d-151          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-152          [-1, 256, 16, 16]             512\n            ReLU-153          [-1, 256, 16, 16]               0\n          Conv2d-154          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-155          [-1, 256, 16, 16]             512\n            ReLU-156          [-1, 256, 16, 16]               0\n          Conv2d-157         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-158         [-1, 1024, 16, 16]           2,048\n            ReLU-159         [-1, 1024, 16, 16]               0\n      Bottleneck-160         [-1, 1024, 16, 16]               0\n          Conv2d-161          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-162          [-1, 256, 16, 16]             512\n            ReLU-163          [-1, 256, 16, 16]               0\n          Conv2d-164          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-165          [-1, 256, 16, 16]             512\n            ReLU-166          [-1, 256, 16, 16]               0\n          Conv2d-167         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-168         [-1, 1024, 16, 16]           2,048\n            ReLU-169         [-1, 1024, 16, 16]               0\n      Bottleneck-170         [-1, 1024, 16, 16]               0\n          Conv2d-171          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-172          [-1, 256, 16, 16]             512\n            ReLU-173          [-1, 256, 16, 16]               0\n          Conv2d-174          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-175          [-1, 256, 16, 16]             512\n            ReLU-176          [-1, 256, 16, 16]               0\n          Conv2d-177         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-178         [-1, 1024, 16, 16]           2,048\n            ReLU-179         [-1, 1024, 16, 16]               0\n      Bottleneck-180         [-1, 1024, 16, 16]               0\n          Conv2d-181          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-182          [-1, 256, 16, 16]             512\n            ReLU-183          [-1, 256, 16, 16]               0\n          Conv2d-184          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-185          [-1, 256, 16, 16]             512\n            ReLU-186          [-1, 256, 16, 16]               0\n          Conv2d-187         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-188         [-1, 1024, 16, 16]           2,048\n            ReLU-189         [-1, 1024, 16, 16]               0\n      Bottleneck-190         [-1, 1024, 16, 16]               0\n          Conv2d-191          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-192          [-1, 256, 16, 16]             512\n            ReLU-193          [-1, 256, 16, 16]               0\n          Conv2d-194          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-195          [-1, 256, 16, 16]             512\n            ReLU-196          [-1, 256, 16, 16]               0\n          Conv2d-197         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-198         [-1, 1024, 16, 16]           2,048\n            ReLU-199         [-1, 1024, 16, 16]               0\n      Bottleneck-200         [-1, 1024, 16, 16]               0\n          Conv2d-201          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-202          [-1, 256, 16, 16]             512\n            ReLU-203          [-1, 256, 16, 16]               0\n          Conv2d-204          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-205          [-1, 256, 16, 16]             512\n            ReLU-206          [-1, 256, 16, 16]               0\n          Conv2d-207         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-208         [-1, 1024, 16, 16]           2,048\n            ReLU-209         [-1, 1024, 16, 16]               0\n      Bottleneck-210         [-1, 1024, 16, 16]               0\n          Conv2d-211          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-212          [-1, 256, 16, 16]             512\n            ReLU-213          [-1, 256, 16, 16]               0\n          Conv2d-214          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-215          [-1, 256, 16, 16]             512\n            ReLU-216          [-1, 256, 16, 16]               0\n          Conv2d-217         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-218         [-1, 1024, 16, 16]           2,048\n            ReLU-219         [-1, 1024, 16, 16]               0\n      Bottleneck-220         [-1, 1024, 16, 16]               0\n          Conv2d-221          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-222          [-1, 256, 16, 16]             512\n            ReLU-223          [-1, 256, 16, 16]               0\n          Conv2d-224          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-225          [-1, 256, 16, 16]             512\n            ReLU-226          [-1, 256, 16, 16]               0\n          Conv2d-227         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-228         [-1, 1024, 16, 16]           2,048\n            ReLU-229         [-1, 1024, 16, 16]               0\n      Bottleneck-230         [-1, 1024, 16, 16]               0\n          Conv2d-231          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-232          [-1, 256, 16, 16]             512\n            ReLU-233          [-1, 256, 16, 16]               0\n          Conv2d-234          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-235          [-1, 256, 16, 16]             512\n            ReLU-236          [-1, 256, 16, 16]               0\n          Conv2d-237         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-238         [-1, 1024, 16, 16]           2,048\n            ReLU-239         [-1, 1024, 16, 16]               0\n      Bottleneck-240         [-1, 1024, 16, 16]               0\n          Conv2d-241          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-242          [-1, 256, 16, 16]             512\n            ReLU-243          [-1, 256, 16, 16]               0\n          Conv2d-244          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-245          [-1, 256, 16, 16]             512\n            ReLU-246          [-1, 256, 16, 16]               0\n          Conv2d-247         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-248         [-1, 1024, 16, 16]           2,048\n            ReLU-249         [-1, 1024, 16, 16]               0\n      Bottleneck-250         [-1, 1024, 16, 16]               0\n          Conv2d-251          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-252          [-1, 256, 16, 16]             512\n            ReLU-253          [-1, 256, 16, 16]               0\n          Conv2d-254          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-255          [-1, 256, 16, 16]             512\n            ReLU-256          [-1, 256, 16, 16]               0\n          Conv2d-257         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-258         [-1, 1024, 16, 16]           2,048\n            ReLU-259         [-1, 1024, 16, 16]               0\n      Bottleneck-260         [-1, 1024, 16, 16]               0\n          Conv2d-261          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-262          [-1, 256, 16, 16]             512\n            ReLU-263          [-1, 256, 16, 16]               0\n          Conv2d-264          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-265          [-1, 256, 16, 16]             512\n            ReLU-266          [-1, 256, 16, 16]               0\n          Conv2d-267         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-268         [-1, 1024, 16, 16]           2,048\n            ReLU-269         [-1, 1024, 16, 16]               0\n      Bottleneck-270         [-1, 1024, 16, 16]               0\n          Conv2d-271          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-272          [-1, 256, 16, 16]             512\n            ReLU-273          [-1, 256, 16, 16]               0\n          Conv2d-274          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-275          [-1, 256, 16, 16]             512\n            ReLU-276          [-1, 256, 16, 16]               0\n          Conv2d-277         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-278         [-1, 1024, 16, 16]           2,048\n            ReLU-279         [-1, 1024, 16, 16]               0\n      Bottleneck-280         [-1, 1024, 16, 16]               0\n          Conv2d-281          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-282          [-1, 256, 16, 16]             512\n            ReLU-283          [-1, 256, 16, 16]               0\n          Conv2d-284          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-285          [-1, 256, 16, 16]             512\n            ReLU-286          [-1, 256, 16, 16]               0\n          Conv2d-287         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-288         [-1, 1024, 16, 16]           2,048\n            ReLU-289         [-1, 1024, 16, 16]               0\n      Bottleneck-290         [-1, 1024, 16, 16]               0\n          Conv2d-291          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-292          [-1, 256, 16, 16]             512\n            ReLU-293          [-1, 256, 16, 16]               0\n          Conv2d-294          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-295          [-1, 256, 16, 16]             512\n            ReLU-296          [-1, 256, 16, 16]               0\n          Conv2d-297         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-298         [-1, 1024, 16, 16]           2,048\n            ReLU-299         [-1, 1024, 16, 16]               0\n      Bottleneck-300         [-1, 1024, 16, 16]               0\n          Conv2d-301          [-1, 256, 16, 16]         262,144\n     BatchNorm2d-302          [-1, 256, 16, 16]             512\n            ReLU-303          [-1, 256, 16, 16]               0\n          Conv2d-304          [-1, 256, 16, 16]         589,824\n     BatchNorm2d-305          [-1, 256, 16, 16]             512\n            ReLU-306          [-1, 256, 16, 16]               0\n          Conv2d-307         [-1, 1024, 16, 16]         262,144\n     BatchNorm2d-308         [-1, 1024, 16, 16]           2,048\n            ReLU-309         [-1, 1024, 16, 16]               0\n      Bottleneck-310         [-1, 1024, 16, 16]               0\n          Conv2d-311          [-1, 512, 16, 16]         524,288\n     BatchNorm2d-312          [-1, 512, 16, 16]           1,024\n            ReLU-313          [-1, 512, 16, 16]               0\n          Conv2d-314            [-1, 512, 8, 8]       2,359,296\n     BatchNorm2d-315            [-1, 512, 8, 8]           1,024\n            ReLU-316            [-1, 512, 8, 8]               0\n          Conv2d-317           [-1, 2048, 8, 8]       1,048,576\n     BatchNorm2d-318           [-1, 2048, 8, 8]           4,096\n          Conv2d-319           [-1, 2048, 8, 8]       2,097,152\n     BatchNorm2d-320           [-1, 2048, 8, 8]           4,096\n            ReLU-321           [-1, 2048, 8, 8]               0\n      Bottleneck-322           [-1, 2048, 8, 8]               0\n          Conv2d-323            [-1, 512, 8, 8]       1,048,576\n     BatchNorm2d-324            [-1, 512, 8, 8]           1,024\n            ReLU-325            [-1, 512, 8, 8]               0\n          Conv2d-326            [-1, 512, 8, 8]       2,359,296\n     BatchNorm2d-327            [-1, 512, 8, 8]           1,024\n            ReLU-328            [-1, 512, 8, 8]               0\n          Conv2d-329           [-1, 2048, 8, 8]       1,048,576\n     BatchNorm2d-330           [-1, 2048, 8, 8]           4,096\n            ReLU-331           [-1, 2048, 8, 8]               0\n      Bottleneck-332           [-1, 2048, 8, 8]               0\n          Conv2d-333            [-1, 512, 8, 8]       1,048,576\n     BatchNorm2d-334            [-1, 512, 8, 8]           1,024\n            ReLU-335            [-1, 512, 8, 8]               0\n          Conv2d-336            [-1, 512, 8, 8]       2,359,296\n     BatchNorm2d-337            [-1, 512, 8, 8]           1,024\n            ReLU-338            [-1, 512, 8, 8]               0\n          Conv2d-339           [-1, 2048, 8, 8]       1,048,576\n     BatchNorm2d-340           [-1, 2048, 8, 8]           4,096\n            ReLU-341           [-1, 2048, 8, 8]               0\n      Bottleneck-342           [-1, 2048, 8, 8]               0\nAdaptiveAvgPool2d-343           [-1, 2048, 1, 1]               0\n        Identity-344                 [-1, 2048]               0\n          ResNet-345                 [-1, 2048]               0\n         Dropout-346                 [-1, 2048]               0\n          Linear-347                    [-1, 2]           4,098\n================================================================\nTotal params: 42,504,258\nTrainable params: 4,098\nNon-trainable params: 42,500,160\n----------------------------------------------------------------\nInput size (MB): 0.75\nForward/backward pass size (MB): 561.31\nParams size (MB): 162.14\nEstimated Total Size (MB): 724.20\n----------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"# @title Функція для тренування\nimport time\n\ndef train(model, optimizer, loss_fn, train_dl, val_dl,\n          metrics=None, metrics_name=None, epochs=20, device='cpu', task='regression'):\n    '''\n    Runs training loop for classification problems. Returns Keras-style\n    per-epoch history of loss and accuracy over training and validation data.\n\n    Parameters\n    ----------\n    model : nn.Module\n        Neural network model\n    optimizer : torch.optim.Optimizer\n        Search space optimizer (e.g. Adam)\n    loss_fn :\n        Loss function (e.g. nn.CrossEntropyLoss())\n    train_dl :\n        Iterable dataloader for training data.\n    val_dl :\n        Iterable dataloader for validation data.\n    metrics: list\n        List of sklearn metrics functions to be calculated\n    metrics_name: list\n        List of matrics names\n    epochs : int\n        Number of epochs to run\n    device : string\n        Specifies 'cuda' or 'cpu'\n    task : string\n        type of problem. It can be regression, binary or multiclass\n\n    Returns\n    -------\n    Dictionary\n        Similar to Keras' fit(), the output dictionary contains per-epoch\n        history of training loss, training accuracy, validation loss, and\n        validation accuracy.\n    '''\n\n    print('train() called: model=%s, opt=%s(lr=%f), epochs=%d, device=%s\\n' % \\\n          (type(model).__name__, type(optimizer).__name__,\n           optimizer.param_groups[0]['lr'], epochs, device))\n\n    metrics = metrics if metrics else []\n    metrics_name = metrics_name if metrics_name else [metric.__name__ for metric in metrics]\n\n    history = {} # Collects per-epoch loss and metrics like Keras' fit().\n    history['loss'] = []\n    history['val_loss'] = []\n    for name in metrics_name:\n        history[name] = []\n        history[f'val_{name}'] = []\n\n    start_time_train = time.time()\n\n    for epoch in range(epochs):\n\n        # --- TRAIN AND EVALUATE ON TRAINING SET -----------------------------\n        start_time_epoch = time.time()\n\n        model.train()\n        history_train = {name: 0 for name in ['loss']+metrics_name}\n\n        for batch in train_dl:\n            x    = batch[0].to(device)\n            y    = batch[1].to(device)\n            y_pred = model(x)\n            loss = loss_fn(y_pred, y)\n\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n            y_pred = y_pred.detach().cpu().numpy()\n            y = y.detach().cpu().numpy()\n\n\n            history_train['loss'] += loss.item() * x.size(0)\n            for name, func in zip(metrics_name, metrics):\n                try:\n                    history_train[name] += func(y, y_pred) * x.size(0)\n                except:\n                    if task == 'binary': y_pred_ = y_pred.round()\n                    elif task == 'multiclass': y_pred_ = y_pred.argmax(axis=-1)\n                    history_train[name] += func(y, y_pred_) * x.size(0)\n\n        for name in history_train:\n            history_train[name] /= len(train_dl.dataset)\n\n\n        # --- EVALUATE ON VALIDATION SET -------------------------------------\n        model.eval()\n        history_val = {'val_' + name: 0 for name in metrics_name+['loss']}\n\n        with torch.no_grad():\n            for batch in val_dl:\n                x    = batch[0].to(device)\n                y    = batch[1].to(device)\n                y_pred = model(x)\n                loss = loss_fn(y_pred, y)\n\n                y_pred = y_pred.cpu().numpy()\n                y = y.cpu().numpy()\n\n                history_val['val_loss'] += loss.item() * x.size(0)\n                for name, func in zip(metrics_name, metrics):\n                    try:\n                        history_val['val_'+name] += func(y, y_pred) * x.size(0)\n                    except:\n                        if task == 'binary': y_pred_ = y_pred.round()\n                        elif task == 'multiclass': y_pred_ = y_pred.argmax(axis=-1)\n\n                        history_val['val_'+name] += func(y, y_pred_) * x.size(0)\n\n        for name in history_val:\n            history_val[name] /= len(val_dl.dataset)\n\n        # PRINTING RESULTS\n\n        end_time_epoch = time.time()\n\n        for name in history_train:\n            history[name].append(history_train[name])\n            history['val_'+name].append(history_val['val_'+name])\n\n        total_time_epoch = end_time_epoch - start_time_epoch\n\n        print(f'Epoch {epoch+1:4d} {total_time_epoch:4.0f}sec', end='\\t')\n        for name in history_train:\n            print(f'{name}: {history[name][-1]:10.3g}', end='\\t')\n            print(f\"val_{name}: {history['val_'+name][-1]:10.3g}\", end='\\t')\n        print()\n\n    # END OF TRAINING LOOP\n\n    end_time_train       = time.time()\n    total_time_train     = end_time_train - start_time_train\n    print()\n    print('Time total:     %5.2f sec' % (total_time_train))\n\n    return history","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:11:44.890988Z","iopub.execute_input":"2024-04-16T12:11:44.891364Z","iopub.status.idle":"2024-04-16T12:11:44.915983Z","shell.execute_reply.started":"2024-04-16T12:11:44.891334Z","shell.execute_reply":"2024-04-16T12:11:44.914966Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"total_cls = [item[1] for item in dataset]\ncount_all = total_cls.count(0)\ncount_hem = total_cls.count(1)\nprint(f'{count_all} {count_hem}')","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:11:51.042193Z","iopub.execute_input":"2024-04-16T12:11:51.042562Z","iopub.status.idle":"2024-04-16T12:14:27.557037Z","shell.execute_reply.started":"2024-04-16T12:11:51.042530Z","shell.execute_reply":"2024-04-16T12:14:27.556065Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"7272 3389\n","output_type":"stream"}]},{"cell_type":"code","source":"weight_all = count_hem / (count_all + count_hem)\nweight_hem = count_all / (count_all + count_hem)\nweights = torch.tensor([weight_all, weight_hem], device=device)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:14:27.566119Z","iopub.execute_input":"2024-04-16T12:14:27.566440Z","iopub.status.idle":"2024-04-16T12:14:27.579134Z","shell.execute_reply.started":"2024-04-16T12:14:27.566408Z","shell.execute_reply":"2024-04-16T12:14:27.578315Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"loss_fn = nn.CrossEntropyLoss(weight=weights)\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-4)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:14:27.581721Z","iopub.execute_input":"2024-04-16T12:14:27.582313Z","iopub.status.idle":"2024-04-16T12:14:27.595145Z","shell.execute_reply.started":"2024-04-16T12:14:27.582280Z","shell.execute_reply":"2024-04-16T12:14:27.594103Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\nhistory = train(model, optimizer, loss_fn, train_loader, val_loader,\n                epochs=13,\n                metrics=[accuracy_score],\n                device=device,\n                task='multiclass')","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:14:27.596244Z","iopub.execute_input":"2024-04-16T12:14:27.596490Z","iopub.status.idle":"2024-04-16T12:41:41.281390Z","shell.execute_reply.started":"2024-04-16T12:14:27.596468Z","shell.execute_reply":"2024-04-16T12:41:41.280413Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"train() called: model=TransferLerningLeukemiaClassifier, opt=Adam(lr=0.000100), epochs=13, device=cuda\n\nEpoch    1  126sec\tloss:      0.673\tval_loss:      0.672\taccuracy_score:      0.605\tval_accuracy_score:      0.559\t\nEpoch    2  125sec\tloss:      0.617\tval_loss:      0.629\taccuracy_score:      0.717\tval_accuracy_score:      0.773\t\nEpoch    3  125sec\tloss:      0.578\tval_loss:      0.568\taccuracy_score:      0.751\tval_accuracy_score:      0.807\t\nEpoch    4  126sec\tloss:      0.552\tval_loss:      0.536\taccuracy_score:      0.777\tval_accuracy_score:      0.787\t\nEpoch    5  126sec\tloss:      0.531\tval_loss:      0.522\taccuracy_score:      0.773\tval_accuracy_score:      0.813\t\nEpoch    6  126sec\tloss:       0.52\tval_loss:       0.51\taccuracy_score:      0.786\tval_accuracy_score:      0.811\t\nEpoch    7  126sec\tloss:      0.509\tval_loss:      0.499\taccuracy_score:      0.789\tval_accuracy_score:      0.808\t\nEpoch    8  126sec\tloss:        0.5\tval_loss:      0.492\taccuracy_score:      0.795\tval_accuracy_score:      0.794\t\nEpoch    9  126sec\tloss:      0.491\tval_loss:      0.486\taccuracy_score:      0.798\tval_accuracy_score:      0.811\t\nEpoch   10  125sec\tloss:      0.485\tval_loss:       0.48\taccuracy_score:      0.801\tval_accuracy_score:      0.798\t\nEpoch   11  126sec\tloss:      0.478\tval_loss:      0.476\taccuracy_score:      0.798\tval_accuracy_score:      0.797\t\nEpoch   12  125sec\tloss:      0.477\tval_loss:      0.472\taccuracy_score:      0.803\tval_accuracy_score:      0.794\t\nEpoch   13  126sec\tloss:      0.469\tval_loss:      0.467\taccuracy_score:      0.807\tval_accuracy_score:      0.813\t\n\nTime total:     1633.67 sec\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef plot_metric(history, name):\n    plt.title(f\"Model results with {name}\")\n    plt.plot(history[name], label='train')\n    plt.plot(history['val_'+name], label='val')\n    plt.xlabel('Epoch')\n    plt.ylabel(name)\n    plt.legend()\n\n\nplot_metric(history, 'loss')","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:41:41.282554Z","iopub.execute_input":"2024-04-16T12:41:41.282871Z","iopub.status.idle":"2024-04-16T12:41:41.696480Z","shell.execute_reply.started":"2024-04-16T12:41:41.282826Z","shell.execute_reply":"2024-04-16T12:41:41.695428Z"},"trusted":true},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plot_metric(history, 'accuracy_score')","metadata":{"execution":{"iopub.status.busy":"2024-04-16T12:41:41.697699Z","iopub.execute_input":"2024-04-16T12:41:41.698049Z","iopub.status.idle":"2024-04-16T12:41:42.061089Z","shell.execute_reply.started":"2024-04-16T12:41:41.698021Z","shell.execute_reply":"2024-04-16T12:41:42.060116Z"},"trusted":true},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import ConfusionMatrixDisplay\n\nmodel = model.to('cpu')\nmodel.eval()\n\nbatch_size = 1024 \nloader = torch.utils.data.DataLoader(test_data, batch_size=batch_size)\n\ny_true = []\ny_pred = []\n\nfor X_batch, y_batch in loader:\n    batch_pred = model.predict(X_batch)\n    \n    y_true.extend(y_batch.tolist())\n    y_pred.extend(batch_pred.argmax(-1).tolist())\n\ndisplay_labels = dataset1.classes\n\nConfusionMatrixDisplay.from_predictions(y_true, y_pred, display_labels=display_labels)\nplt.xticks(rotation=90)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T13:04:49.977795Z","iopub.execute_input":"2024-04-16T13:04:49.978679Z","iopub.status.idle":"2024-04-16T13:04:52.719646Z","shell.execute_reply.started":"2024-04-16T13:04:49.978641Z","shell.execute_reply":"2024-04-16T13:04:52.718306Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmetrics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ConfusionMatrixDisplay\n\u001b[0;32m----> 3\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241m.\u001b[39mto(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      4\u001b[0m model\u001b[38;5;241m.\u001b[39meval()\n\u001b[1;32m      6\u001b[0m batch_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1024\u001b[39m \n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"],"ename":"NameError","evalue":"name 'model' is not defined","output_type":"error"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred.argmax(-1), target_names=dataset1.classes))","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}